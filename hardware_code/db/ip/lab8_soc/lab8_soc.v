// lab8_soc.v

// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module lab8_soc (
		output wire [31:0] beginpoint_export,          //          beginpoint.export
		input  wire        clk_clk,                    //                 clk.clk
		input  wire [6:0]  debug_min_index_export,     //     debug_min_index.export
		input  wire [15:0] debug_min_num_export,       //       debug_min_num.export
		input  wire [2:0]  debug_state_export,         //         debug_state.export
		output wire [31:0] distancehigh_export,        //        distancehigh.export
		output wire [31:0] distancelow_export,         //         distancelow.export
		output wire [31:0] endpoint_export,            //            endpoint.export
		input  wire        finish_acc_export,          //          finish_acc.export
		output wire [7:0]  keycode_export,             //             keycode.export
		input  wire [15:0] min_path_length_acc_export, // min_path_length_acc.export
		output wire [1:0]  otg_hpi_address_export,     //     otg_hpi_address.export
		output wire        otg_hpi_cs_export,          //          otg_hpi_cs.export
		input  wire [15:0] otg_hpi_data_in_port,       //        otg_hpi_data.in_port
		output wire [15:0] otg_hpi_data_out_port,      //                    .out_port
		output wire        otg_hpi_r_export,           //           otg_hpi_r.export
		output wire        otg_hpi_reset_export,       //       otg_hpi_reset.export
		output wire        otg_hpi_w_export,           //           otg_hpi_w.export
		output wire [31:0] path1_export,               //               path1.export
		output wire [31:0] path2_export,               //               path2.export
		output wire [31:0] path3_export,               //               path3.export
		output wire [31:0] path4_export,               //               path4.export
		input  wire [9:0]  pos_x_export,               //               pos_x.export
		input  wire [9:0]  pos_y_export,               //               pos_y.export
		input  wire        reset_reset_n,              //               reset.reset_n
		output wire        sdram_clk_clk,              //           sdram_clk.clk
		output wire [12:0] sdram_wire_addr,            //          sdram_wire.addr
		output wire [1:0]  sdram_wire_ba,              //                    .ba
		output wire        sdram_wire_cas_n,           //                    .cas_n
		output wire        sdram_wire_cke,             //                    .cke
		output wire        sdram_wire_cs_n,            //                    .cs_n
		inout  wire [31:0] sdram_wire_dq,              //                    .dq
		output wire [3:0]  sdram_wire_dqm,             //                    .dqm
		output wire        sdram_wire_ras_n,           //                    .ras_n
		output wire        sdram_wire_we_n,            //                    .we_n
		output wire [7:0]  source_index_acc_export,    //    source_index_acc.export
		output wire        start_acc_export,           //           start_acc.export
		output wire [7:0]  target_index_acc_export     //    target_index_acc.export
	);

	wire         sdram_pll_c0_clk;                                            // sdram_pll:c0 -> [mm_interconnect_0:sdram_pll_c0_clk, rst_controller_002:clk, sdram:clk]
	wire  [31:0] nios2_gen2_0_data_master_readdata;                           // mm_interconnect_0:nios2_gen2_0_data_master_readdata -> nios2_gen2_0:d_readdata
	wire         nios2_gen2_0_data_master_waitrequest;                        // mm_interconnect_0:nios2_gen2_0_data_master_waitrequest -> nios2_gen2_0:d_waitrequest
	wire         nios2_gen2_0_data_master_debugaccess;                        // nios2_gen2_0:debug_mem_slave_debugaccess_to_roms -> mm_interconnect_0:nios2_gen2_0_data_master_debugaccess
	wire  [28:0] nios2_gen2_0_data_master_address;                            // nios2_gen2_0:d_address -> mm_interconnect_0:nios2_gen2_0_data_master_address
	wire   [3:0] nios2_gen2_0_data_master_byteenable;                         // nios2_gen2_0:d_byteenable -> mm_interconnect_0:nios2_gen2_0_data_master_byteenable
	wire         nios2_gen2_0_data_master_read;                               // nios2_gen2_0:d_read -> mm_interconnect_0:nios2_gen2_0_data_master_read
	wire         nios2_gen2_0_data_master_write;                              // nios2_gen2_0:d_write -> mm_interconnect_0:nios2_gen2_0_data_master_write
	wire  [31:0] nios2_gen2_0_data_master_writedata;                          // nios2_gen2_0:d_writedata -> mm_interconnect_0:nios2_gen2_0_data_master_writedata
	wire  [31:0] nios2_gen2_0_instruction_master_readdata;                    // mm_interconnect_0:nios2_gen2_0_instruction_master_readdata -> nios2_gen2_0:i_readdata
	wire         nios2_gen2_0_instruction_master_waitrequest;                 // mm_interconnect_0:nios2_gen2_0_instruction_master_waitrequest -> nios2_gen2_0:i_waitrequest
	wire  [28:0] nios2_gen2_0_instruction_master_address;                     // nios2_gen2_0:i_address -> mm_interconnect_0:nios2_gen2_0_instruction_master_address
	wire         nios2_gen2_0_instruction_master_read;                        // nios2_gen2_0:i_read -> mm_interconnect_0:nios2_gen2_0_instruction_master_read
	wire         mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_chipselect;  // mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_chipselect -> jtag_uart_0:av_chipselect
	wire  [31:0] mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_readdata;    // jtag_uart_0:av_readdata -> mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_readdata
	wire         mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_waitrequest; // jtag_uart_0:av_waitrequest -> mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_waitrequest
	wire   [0:0] mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_address;     // mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_address -> jtag_uart_0:av_address
	wire         mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_read;        // mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_read -> jtag_uart_0:av_read_n
	wire         mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_write;       // mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_write -> jtag_uart_0:av_write_n
	wire  [31:0] mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_writedata;   // mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_writedata -> jtag_uart_0:av_writedata
	wire  [31:0] mm_interconnect_0_sysid_qsys_0_control_slave_readdata;       // sysid_qsys_0:readdata -> mm_interconnect_0:sysid_qsys_0_control_slave_readdata
	wire   [0:0] mm_interconnect_0_sysid_qsys_0_control_slave_address;        // mm_interconnect_0:sysid_qsys_0_control_slave_address -> sysid_qsys_0:address
	wire  [31:0] mm_interconnect_0_nios2_gen2_0_debug_mem_slave_readdata;     // nios2_gen2_0:debug_mem_slave_readdata -> mm_interconnect_0:nios2_gen2_0_debug_mem_slave_readdata
	wire         mm_interconnect_0_nios2_gen2_0_debug_mem_slave_waitrequest;  // nios2_gen2_0:debug_mem_slave_waitrequest -> mm_interconnect_0:nios2_gen2_0_debug_mem_slave_waitrequest
	wire         mm_interconnect_0_nios2_gen2_0_debug_mem_slave_debugaccess;  // mm_interconnect_0:nios2_gen2_0_debug_mem_slave_debugaccess -> nios2_gen2_0:debug_mem_slave_debugaccess
	wire   [8:0] mm_interconnect_0_nios2_gen2_0_debug_mem_slave_address;      // mm_interconnect_0:nios2_gen2_0_debug_mem_slave_address -> nios2_gen2_0:debug_mem_slave_address
	wire         mm_interconnect_0_nios2_gen2_0_debug_mem_slave_read;         // mm_interconnect_0:nios2_gen2_0_debug_mem_slave_read -> nios2_gen2_0:debug_mem_slave_read
	wire   [3:0] mm_interconnect_0_nios2_gen2_0_debug_mem_slave_byteenable;   // mm_interconnect_0:nios2_gen2_0_debug_mem_slave_byteenable -> nios2_gen2_0:debug_mem_slave_byteenable
	wire         mm_interconnect_0_nios2_gen2_0_debug_mem_slave_write;        // mm_interconnect_0:nios2_gen2_0_debug_mem_slave_write -> nios2_gen2_0:debug_mem_slave_write
	wire  [31:0] mm_interconnect_0_nios2_gen2_0_debug_mem_slave_writedata;    // mm_interconnect_0:nios2_gen2_0_debug_mem_slave_writedata -> nios2_gen2_0:debug_mem_slave_writedata
	wire  [31:0] mm_interconnect_0_sdram_pll_pll_slave_readdata;              // sdram_pll:readdata -> mm_interconnect_0:sdram_pll_pll_slave_readdata
	wire   [1:0] mm_interconnect_0_sdram_pll_pll_slave_address;               // mm_interconnect_0:sdram_pll_pll_slave_address -> sdram_pll:address
	wire         mm_interconnect_0_sdram_pll_pll_slave_read;                  // mm_interconnect_0:sdram_pll_pll_slave_read -> sdram_pll:read
	wire         mm_interconnect_0_sdram_pll_pll_slave_write;                 // mm_interconnect_0:sdram_pll_pll_slave_write -> sdram_pll:write
	wire  [31:0] mm_interconnect_0_sdram_pll_pll_slave_writedata;             // mm_interconnect_0:sdram_pll_pll_slave_writedata -> sdram_pll:writedata
	wire         mm_interconnect_0_onchip_memory2_0_s1_chipselect;            // mm_interconnect_0:onchip_memory2_0_s1_chipselect -> onchip_memory2_0:chipselect
	wire  [31:0] mm_interconnect_0_onchip_memory2_0_s1_readdata;              // onchip_memory2_0:readdata -> mm_interconnect_0:onchip_memory2_0_s1_readdata
	wire   [1:0] mm_interconnect_0_onchip_memory2_0_s1_address;               // mm_interconnect_0:onchip_memory2_0_s1_address -> onchip_memory2_0:address
	wire   [3:0] mm_interconnect_0_onchip_memory2_0_s1_byteenable;            // mm_interconnect_0:onchip_memory2_0_s1_byteenable -> onchip_memory2_0:byteenable
	wire         mm_interconnect_0_onchip_memory2_0_s1_write;                 // mm_interconnect_0:onchip_memory2_0_s1_write -> onchip_memory2_0:write
	wire  [31:0] mm_interconnect_0_onchip_memory2_0_s1_writedata;             // mm_interconnect_0:onchip_memory2_0_s1_writedata -> onchip_memory2_0:writedata
	wire         mm_interconnect_0_onchip_memory2_0_s1_clken;                 // mm_interconnect_0:onchip_memory2_0_s1_clken -> onchip_memory2_0:clken
	wire         mm_interconnect_0_sdram_s1_chipselect;                       // mm_interconnect_0:sdram_s1_chipselect -> sdram:az_cs
	wire  [31:0] mm_interconnect_0_sdram_s1_readdata;                         // sdram:za_data -> mm_interconnect_0:sdram_s1_readdata
	wire         mm_interconnect_0_sdram_s1_waitrequest;                      // sdram:za_waitrequest -> mm_interconnect_0:sdram_s1_waitrequest
	wire  [24:0] mm_interconnect_0_sdram_s1_address;                          // mm_interconnect_0:sdram_s1_address -> sdram:az_addr
	wire         mm_interconnect_0_sdram_s1_read;                             // mm_interconnect_0:sdram_s1_read -> sdram:az_rd_n
	wire   [3:0] mm_interconnect_0_sdram_s1_byteenable;                       // mm_interconnect_0:sdram_s1_byteenable -> sdram:az_be_n
	wire         mm_interconnect_0_sdram_s1_readdatavalid;                    // sdram:za_valid -> mm_interconnect_0:sdram_s1_readdatavalid
	wire         mm_interconnect_0_sdram_s1_write;                            // mm_interconnect_0:sdram_s1_write -> sdram:az_wr_n
	wire  [31:0] mm_interconnect_0_sdram_s1_writedata;                        // mm_interconnect_0:sdram_s1_writedata -> sdram:az_data
	wire         mm_interconnect_0_otg_hpi_reset_s1_chipselect;               // mm_interconnect_0:otg_hpi_reset_s1_chipselect -> otg_hpi_reset:chipselect
	wire  [31:0] mm_interconnect_0_otg_hpi_reset_s1_readdata;                 // otg_hpi_reset:readdata -> mm_interconnect_0:otg_hpi_reset_s1_readdata
	wire   [1:0] mm_interconnect_0_otg_hpi_reset_s1_address;                  // mm_interconnect_0:otg_hpi_reset_s1_address -> otg_hpi_reset:address
	wire         mm_interconnect_0_otg_hpi_reset_s1_write;                    // mm_interconnect_0:otg_hpi_reset_s1_write -> otg_hpi_reset:write_n
	wire  [31:0] mm_interconnect_0_otg_hpi_reset_s1_writedata;                // mm_interconnect_0:otg_hpi_reset_s1_writedata -> otg_hpi_reset:writedata
	wire         mm_interconnect_0_otg_hpi_cs_s1_chipselect;                  // mm_interconnect_0:otg_hpi_cs_s1_chipselect -> otg_hpi_cs:chipselect
	wire  [31:0] mm_interconnect_0_otg_hpi_cs_s1_readdata;                    // otg_hpi_cs:readdata -> mm_interconnect_0:otg_hpi_cs_s1_readdata
	wire   [1:0] mm_interconnect_0_otg_hpi_cs_s1_address;                     // mm_interconnect_0:otg_hpi_cs_s1_address -> otg_hpi_cs:address
	wire         mm_interconnect_0_otg_hpi_cs_s1_write;                       // mm_interconnect_0:otg_hpi_cs_s1_write -> otg_hpi_cs:write_n
	wire  [31:0] mm_interconnect_0_otg_hpi_cs_s1_writedata;                   // mm_interconnect_0:otg_hpi_cs_s1_writedata -> otg_hpi_cs:writedata
	wire         mm_interconnect_0_otg_hpi_w_s1_chipselect;                   // mm_interconnect_0:otg_hpi_w_s1_chipselect -> otg_hpi_w:chipselect
	wire  [31:0] mm_interconnect_0_otg_hpi_w_s1_readdata;                     // otg_hpi_w:readdata -> mm_interconnect_0:otg_hpi_w_s1_readdata
	wire   [1:0] mm_interconnect_0_otg_hpi_w_s1_address;                      // mm_interconnect_0:otg_hpi_w_s1_address -> otg_hpi_w:address
	wire         mm_interconnect_0_otg_hpi_w_s1_write;                        // mm_interconnect_0:otg_hpi_w_s1_write -> otg_hpi_w:write_n
	wire  [31:0] mm_interconnect_0_otg_hpi_w_s1_writedata;                    // mm_interconnect_0:otg_hpi_w_s1_writedata -> otg_hpi_w:writedata
	wire         mm_interconnect_0_otg_hpi_r_s1_chipselect;                   // mm_interconnect_0:otg_hpi_r_s1_chipselect -> otg_hpi_r:chipselect
	wire  [31:0] mm_interconnect_0_otg_hpi_r_s1_readdata;                     // otg_hpi_r:readdata -> mm_interconnect_0:otg_hpi_r_s1_readdata
	wire   [1:0] mm_interconnect_0_otg_hpi_r_s1_address;                      // mm_interconnect_0:otg_hpi_r_s1_address -> otg_hpi_r:address
	wire         mm_interconnect_0_otg_hpi_r_s1_write;                        // mm_interconnect_0:otg_hpi_r_s1_write -> otg_hpi_r:write_n
	wire  [31:0] mm_interconnect_0_otg_hpi_r_s1_writedata;                    // mm_interconnect_0:otg_hpi_r_s1_writedata -> otg_hpi_r:writedata
	wire         mm_interconnect_0_otg_hpi_data_s1_chipselect;                // mm_interconnect_0:otg_hpi_data_s1_chipselect -> otg_hpi_data:chipselect
	wire  [31:0] mm_interconnect_0_otg_hpi_data_s1_readdata;                  // otg_hpi_data:readdata -> mm_interconnect_0:otg_hpi_data_s1_readdata
	wire   [1:0] mm_interconnect_0_otg_hpi_data_s1_address;                   // mm_interconnect_0:otg_hpi_data_s1_address -> otg_hpi_data:address
	wire         mm_interconnect_0_otg_hpi_data_s1_write;                     // mm_interconnect_0:otg_hpi_data_s1_write -> otg_hpi_data:write_n
	wire  [31:0] mm_interconnect_0_otg_hpi_data_s1_writedata;                 // mm_interconnect_0:otg_hpi_data_s1_writedata -> otg_hpi_data:writedata
	wire         mm_interconnect_0_otg_hpi_address_s1_chipselect;             // mm_interconnect_0:otg_hpi_address_s1_chipselect -> otg_hpi_address:chipselect
	wire  [31:0] mm_interconnect_0_otg_hpi_address_s1_readdata;               // otg_hpi_address:readdata -> mm_interconnect_0:otg_hpi_address_s1_readdata
	wire   [1:0] mm_interconnect_0_otg_hpi_address_s1_address;                // mm_interconnect_0:otg_hpi_address_s1_address -> otg_hpi_address:address
	wire         mm_interconnect_0_otg_hpi_address_s1_write;                  // mm_interconnect_0:otg_hpi_address_s1_write -> otg_hpi_address:write_n
	wire  [31:0] mm_interconnect_0_otg_hpi_address_s1_writedata;              // mm_interconnect_0:otg_hpi_address_s1_writedata -> otg_hpi_address:writedata
	wire         mm_interconnect_0_keycode_s1_chipselect;                     // mm_interconnect_0:keycode_s1_chipselect -> keycode:chipselect
	wire  [31:0] mm_interconnect_0_keycode_s1_readdata;                       // keycode:readdata -> mm_interconnect_0:keycode_s1_readdata
	wire   [1:0] mm_interconnect_0_keycode_s1_address;                        // mm_interconnect_0:keycode_s1_address -> keycode:address
	wire         mm_interconnect_0_keycode_s1_write;                          // mm_interconnect_0:keycode_s1_write -> keycode:write_n
	wire  [31:0] mm_interconnect_0_keycode_s1_writedata;                      // mm_interconnect_0:keycode_s1_writedata -> keycode:writedata
	wire         mm_interconnect_0_path1_s1_chipselect;                       // mm_interconnect_0:PATH1_s1_chipselect -> PATH1:chipselect
	wire  [31:0] mm_interconnect_0_path1_s1_readdata;                         // PATH1:readdata -> mm_interconnect_0:PATH1_s1_readdata
	wire   [1:0] mm_interconnect_0_path1_s1_address;                          // mm_interconnect_0:PATH1_s1_address -> PATH1:address
	wire         mm_interconnect_0_path1_s1_write;                            // mm_interconnect_0:PATH1_s1_write -> PATH1:write_n
	wire  [31:0] mm_interconnect_0_path1_s1_writedata;                        // mm_interconnect_0:PATH1_s1_writedata -> PATH1:writedata
	wire         mm_interconnect_0_path2_s1_chipselect;                       // mm_interconnect_0:PATH2_s1_chipselect -> PATH2:chipselect
	wire  [31:0] mm_interconnect_0_path2_s1_readdata;                         // PATH2:readdata -> mm_interconnect_0:PATH2_s1_readdata
	wire   [1:0] mm_interconnect_0_path2_s1_address;                          // mm_interconnect_0:PATH2_s1_address -> PATH2:address
	wire         mm_interconnect_0_path2_s1_write;                            // mm_interconnect_0:PATH2_s1_write -> PATH2:write_n
	wire  [31:0] mm_interconnect_0_path2_s1_writedata;                        // mm_interconnect_0:PATH2_s1_writedata -> PATH2:writedata
	wire  [31:0] mm_interconnect_0_pos_x_s1_readdata;                         // POS_X:readdata -> mm_interconnect_0:POS_X_s1_readdata
	wire   [1:0] mm_interconnect_0_pos_x_s1_address;                          // mm_interconnect_0:POS_X_s1_address -> POS_X:address
	wire  [31:0] mm_interconnect_0_pos_y_s1_readdata;                         // POS_Y:readdata -> mm_interconnect_0:POS_Y_s1_readdata
	wire   [1:0] mm_interconnect_0_pos_y_s1_address;                          // mm_interconnect_0:POS_Y_s1_address -> POS_Y:address
	wire         mm_interconnect_0_beginpoint_s1_chipselect;                  // mm_interconnect_0:BEGINPOINT_s1_chipselect -> BEGINPOINT:chipselect
	wire  [31:0] mm_interconnect_0_beginpoint_s1_readdata;                    // BEGINPOINT:readdata -> mm_interconnect_0:BEGINPOINT_s1_readdata
	wire   [1:0] mm_interconnect_0_beginpoint_s1_address;                     // mm_interconnect_0:BEGINPOINT_s1_address -> BEGINPOINT:address
	wire         mm_interconnect_0_beginpoint_s1_write;                       // mm_interconnect_0:BEGINPOINT_s1_write -> BEGINPOINT:write_n
	wire  [31:0] mm_interconnect_0_beginpoint_s1_writedata;                   // mm_interconnect_0:BEGINPOINT_s1_writedata -> BEGINPOINT:writedata
	wire         mm_interconnect_0_endpoint_s1_chipselect;                    // mm_interconnect_0:ENDPOINT_s1_chipselect -> ENDPOINT:chipselect
	wire  [31:0] mm_interconnect_0_endpoint_s1_readdata;                      // ENDPOINT:readdata -> mm_interconnect_0:ENDPOINT_s1_readdata
	wire   [1:0] mm_interconnect_0_endpoint_s1_address;                       // mm_interconnect_0:ENDPOINT_s1_address -> ENDPOINT:address
	wire         mm_interconnect_0_endpoint_s1_write;                         // mm_interconnect_0:ENDPOINT_s1_write -> ENDPOINT:write_n
	wire  [31:0] mm_interconnect_0_endpoint_s1_writedata;                     // mm_interconnect_0:ENDPOINT_s1_writedata -> ENDPOINT:writedata
	wire         mm_interconnect_0_distancehigh_s1_chipselect;                // mm_interconnect_0:distancehigh_s1_chipselect -> distancehigh:chipselect
	wire  [31:0] mm_interconnect_0_distancehigh_s1_readdata;                  // distancehigh:readdata -> mm_interconnect_0:distancehigh_s1_readdata
	wire   [1:0] mm_interconnect_0_distancehigh_s1_address;                   // mm_interconnect_0:distancehigh_s1_address -> distancehigh:address
	wire         mm_interconnect_0_distancehigh_s1_write;                     // mm_interconnect_0:distancehigh_s1_write -> distancehigh:write_n
	wire  [31:0] mm_interconnect_0_distancehigh_s1_writedata;                 // mm_interconnect_0:distancehigh_s1_writedata -> distancehigh:writedata
	wire         mm_interconnect_0_distancelow_s1_chipselect;                 // mm_interconnect_0:distancelow_s1_chipselect -> distancelow:chipselect
	wire  [31:0] mm_interconnect_0_distancelow_s1_readdata;                   // distancelow:readdata -> mm_interconnect_0:distancelow_s1_readdata
	wire   [1:0] mm_interconnect_0_distancelow_s1_address;                    // mm_interconnect_0:distancelow_s1_address -> distancelow:address
	wire         mm_interconnect_0_distancelow_s1_write;                      // mm_interconnect_0:distancelow_s1_write -> distancelow:write_n
	wire  [31:0] mm_interconnect_0_distancelow_s1_writedata;                  // mm_interconnect_0:distancelow_s1_writedata -> distancelow:writedata
	wire         mm_interconnect_0_path3_s1_chipselect;                       // mm_interconnect_0:PATH3_s1_chipselect -> PATH3:chipselect
	wire  [31:0] mm_interconnect_0_path3_s1_readdata;                         // PATH3:readdata -> mm_interconnect_0:PATH3_s1_readdata
	wire   [1:0] mm_interconnect_0_path3_s1_address;                          // mm_interconnect_0:PATH3_s1_address -> PATH3:address
	wire         mm_interconnect_0_path3_s1_write;                            // mm_interconnect_0:PATH3_s1_write -> PATH3:write_n
	wire  [31:0] mm_interconnect_0_path3_s1_writedata;                        // mm_interconnect_0:PATH3_s1_writedata -> PATH3:writedata
	wire         mm_interconnect_0_path4_s1_chipselect;                       // mm_interconnect_0:PATH4_s1_chipselect -> PATH4:chipselect
	wire  [31:0] mm_interconnect_0_path4_s1_readdata;                         // PATH4:readdata -> mm_interconnect_0:PATH4_s1_readdata
	wire   [1:0] mm_interconnect_0_path4_s1_address;                          // mm_interconnect_0:PATH4_s1_address -> PATH4:address
	wire         mm_interconnect_0_path4_s1_write;                            // mm_interconnect_0:PATH4_s1_write -> PATH4:write_n
	wire  [31:0] mm_interconnect_0_path4_s1_writedata;                        // mm_interconnect_0:PATH4_s1_writedata -> PATH4:writedata
	wire         mm_interconnect_0_start_s1_chipselect;                       // mm_interconnect_0:START_s1_chipselect -> START:chipselect
	wire  [31:0] mm_interconnect_0_start_s1_readdata;                         // START:readdata -> mm_interconnect_0:START_s1_readdata
	wire   [1:0] mm_interconnect_0_start_s1_address;                          // mm_interconnect_0:START_s1_address -> START:address
	wire         mm_interconnect_0_start_s1_write;                            // mm_interconnect_0:START_s1_write -> START:write_n
	wire  [31:0] mm_interconnect_0_start_s1_writedata;                        // mm_interconnect_0:START_s1_writedata -> START:writedata
	wire         mm_interconnect_0_source_index_s1_chipselect;                // mm_interconnect_0:SOURCE_INDEX_s1_chipselect -> SOURCE_INDEX:chipselect
	wire  [31:0] mm_interconnect_0_source_index_s1_readdata;                  // SOURCE_INDEX:readdata -> mm_interconnect_0:SOURCE_INDEX_s1_readdata
	wire   [1:0] mm_interconnect_0_source_index_s1_address;                   // mm_interconnect_0:SOURCE_INDEX_s1_address -> SOURCE_INDEX:address
	wire         mm_interconnect_0_source_index_s1_write;                     // mm_interconnect_0:SOURCE_INDEX_s1_write -> SOURCE_INDEX:write_n
	wire  [31:0] mm_interconnect_0_source_index_s1_writedata;                 // mm_interconnect_0:SOURCE_INDEX_s1_writedata -> SOURCE_INDEX:writedata
	wire         mm_interconnect_0_target_index_s1_chipselect;                // mm_interconnect_0:TARGET_INDEX_s1_chipselect -> TARGET_INDEX:chipselect
	wire  [31:0] mm_interconnect_0_target_index_s1_readdata;                  // TARGET_INDEX:readdata -> mm_interconnect_0:TARGET_INDEX_s1_readdata
	wire   [1:0] mm_interconnect_0_target_index_s1_address;                   // mm_interconnect_0:TARGET_INDEX_s1_address -> TARGET_INDEX:address
	wire         mm_interconnect_0_target_index_s1_write;                     // mm_interconnect_0:TARGET_INDEX_s1_write -> TARGET_INDEX:write_n
	wire  [31:0] mm_interconnect_0_target_index_s1_writedata;                 // mm_interconnect_0:TARGET_INDEX_s1_writedata -> TARGET_INDEX:writedata
	wire  [31:0] mm_interconnect_0_finish_s1_readdata;                        // FINISH:readdata -> mm_interconnect_0:FINISH_s1_readdata
	wire   [1:0] mm_interconnect_0_finish_s1_address;                         // mm_interconnect_0:FINISH_s1_address -> FINISH:address
	wire  [31:0] mm_interconnect_0_min_path_length_s1_readdata;               // MIN_PATH_LENGTH:readdata -> mm_interconnect_0:MIN_PATH_LENGTH_s1_readdata
	wire   [1:0] mm_interconnect_0_min_path_length_s1_address;                // mm_interconnect_0:MIN_PATH_LENGTH_s1_address -> MIN_PATH_LENGTH:address
	wire  [31:0] mm_interconnect_0_debug_state_s1_readdata;                   // DEBUG_STATE:readdata -> mm_interconnect_0:DEBUG_STATE_s1_readdata
	wire   [1:0] mm_interconnect_0_debug_state_s1_address;                    // mm_interconnect_0:DEBUG_STATE_s1_address -> DEBUG_STATE:address
	wire  [31:0] mm_interconnect_0_debug_min_index_s1_readdata;               // DEBUG_MIN_INDEX:readdata -> mm_interconnect_0:DEBUG_MIN_INDEX_s1_readdata
	wire   [1:0] mm_interconnect_0_debug_min_index_s1_address;                // mm_interconnect_0:DEBUG_MIN_INDEX_s1_address -> DEBUG_MIN_INDEX:address
	wire  [31:0] mm_interconnect_0_debug_min_num_s1_readdata;                 // DEBUG_MIN_NUM:readdata -> mm_interconnect_0:DEBUG_MIN_NUM_s1_readdata
	wire   [1:0] mm_interconnect_0_debug_min_num_s1_address;                  // mm_interconnect_0:DEBUG_MIN_NUM_s1_address -> DEBUG_MIN_NUM:address
	wire         mm_interconnect_0_timer_0_s1_chipselect;                     // mm_interconnect_0:timer_0_s1_chipselect -> timer_0:chipselect
	wire  [15:0] mm_interconnect_0_timer_0_s1_readdata;                       // timer_0:readdata -> mm_interconnect_0:timer_0_s1_readdata
	wire   [2:0] mm_interconnect_0_timer_0_s1_address;                        // mm_interconnect_0:timer_0_s1_address -> timer_0:address
	wire         mm_interconnect_0_timer_0_s1_write;                          // mm_interconnect_0:timer_0_s1_write -> timer_0:write_n
	wire  [15:0] mm_interconnect_0_timer_0_s1_writedata;                      // mm_interconnect_0:timer_0_s1_writedata -> timer_0:writedata
	wire         irq_mapper_receiver0_irq;                                    // jtag_uart_0:av_irq -> irq_mapper:receiver0_irq
	wire         irq_mapper_receiver1_irq;                                    // timer_0:irq -> irq_mapper:receiver1_irq
	wire  [31:0] nios2_gen2_0_irq_irq;                                        // irq_mapper:sender_irq -> nios2_gen2_0:irq
	wire         rst_controller_reset_out_reset;                              // rst_controller:reset_out -> [BEGINPOINT:reset_n, DEBUG_MIN_INDEX:reset_n, DEBUG_MIN_NUM:reset_n, DEBUG_STATE:reset_n, ENDPOINT:reset_n, FINISH:reset_n, MIN_PATH_LENGTH:reset_n, PATH1:reset_n, PATH2:reset_n, PATH3:reset_n, PATH4:reset_n, POS_X:reset_n, POS_Y:reset_n, SOURCE_INDEX:reset_n, START:reset_n, TARGET_INDEX:reset_n, distancehigh:reset_n, distancelow:reset_n, jtag_uart_0:rst_n, mm_interconnect_0:jtag_uart_0_reset_reset_bridge_in_reset_reset, otg_hpi_address:reset_n, otg_hpi_cs:reset_n, otg_hpi_data:reset_n, otg_hpi_r:reset_n, otg_hpi_reset:reset_n, otg_hpi_w:reset_n]
	wire         rst_controller_001_reset_out_reset;                          // rst_controller_001:reset_out -> [irq_mapper:reset, keycode:reset_n, mm_interconnect_0:nios2_gen2_0_reset_reset_bridge_in_reset_reset, nios2_gen2_0:reset_n, onchip_memory2_0:reset, rst_translator:in_reset, sdram_pll:reset, sysid_qsys_0:reset_n, timer_0:reset_n]
	wire         rst_controller_001_reset_out_reset_req;                      // rst_controller_001:reset_req -> [nios2_gen2_0:reset_req, onchip_memory2_0:reset_req, rst_translator:reset_req_in]
	wire         nios2_gen2_0_debug_reset_request_reset;                      // nios2_gen2_0:debug_reset_request -> [rst_controller_001:reset_in1, rst_controller_002:reset_in1]
	wire         rst_controller_002_reset_out_reset;                          // rst_controller_002:reset_out -> [mm_interconnect_0:sdram_reset_reset_bridge_in_reset_reset, sdram:reset_n]

	lab8_soc_BEGINPOINT beginpoint (
		.clk        (clk_clk),                                    //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),            //               reset.reset_n
		.address    (mm_interconnect_0_beginpoint_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_beginpoint_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_beginpoint_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_beginpoint_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_beginpoint_s1_readdata),   //                    .readdata
		.out_port   (beginpoint_export)                           // external_connection.export
	);

	lab8_soc_DEBUG_MIN_INDEX debug_min_index (
		.clk      (clk_clk),                                       //                 clk.clk
		.reset_n  (~rst_controller_reset_out_reset),               //               reset.reset_n
		.address  (mm_interconnect_0_debug_min_index_s1_address),  //                  s1.address
		.readdata (mm_interconnect_0_debug_min_index_s1_readdata), //                    .readdata
		.in_port  (debug_min_index_export)                         // external_connection.export
	);

	lab8_soc_DEBUG_MIN_NUM debug_min_num (
		.clk      (clk_clk),                                     //                 clk.clk
		.reset_n  (~rst_controller_reset_out_reset),             //               reset.reset_n
		.address  (mm_interconnect_0_debug_min_num_s1_address),  //                  s1.address
		.readdata (mm_interconnect_0_debug_min_num_s1_readdata), //                    .readdata
		.in_port  (debug_min_num_export)                         // external_connection.export
	);

	lab8_soc_DEBUG_STATE debug_state (
		.clk      (clk_clk),                                   //                 clk.clk
		.reset_n  (~rst_controller_reset_out_reset),           //               reset.reset_n
		.address  (mm_interconnect_0_debug_state_s1_address),  //                  s1.address
		.readdata (mm_interconnect_0_debug_state_s1_readdata), //                    .readdata
		.in_port  (debug_state_export)                         // external_connection.export
	);

	lab8_soc_BEGINPOINT endpoint (
		.clk        (clk_clk),                                  //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),          //               reset.reset_n
		.address    (mm_interconnect_0_endpoint_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_endpoint_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_endpoint_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_endpoint_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_endpoint_s1_readdata),   //                    .readdata
		.out_port   (endpoint_export)                           // external_connection.export
	);

	lab8_soc_FINISH finish (
		.clk      (clk_clk),                              //                 clk.clk
		.reset_n  (~rst_controller_reset_out_reset),      //               reset.reset_n
		.address  (mm_interconnect_0_finish_s1_address),  //                  s1.address
		.readdata (mm_interconnect_0_finish_s1_readdata), //                    .readdata
		.in_port  (finish_acc_export)                     // external_connection.export
	);

	lab8_soc_DEBUG_MIN_NUM min_path_length (
		.clk      (clk_clk),                                       //                 clk.clk
		.reset_n  (~rst_controller_reset_out_reset),               //               reset.reset_n
		.address  (mm_interconnect_0_min_path_length_s1_address),  //                  s1.address
		.readdata (mm_interconnect_0_min_path_length_s1_readdata), //                    .readdata
		.in_port  (min_path_length_acc_export)                     // external_connection.export
	);

	lab8_soc_BEGINPOINT path1 (
		.clk        (clk_clk),                               //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),       //               reset.reset_n
		.address    (mm_interconnect_0_path1_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_path1_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_path1_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_path1_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_path1_s1_readdata),   //                    .readdata
		.out_port   (path1_export)                           // external_connection.export
	);

	lab8_soc_BEGINPOINT path2 (
		.clk        (clk_clk),                               //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),       //               reset.reset_n
		.address    (mm_interconnect_0_path2_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_path2_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_path2_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_path2_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_path2_s1_readdata),   //                    .readdata
		.out_port   (path2_export)                           // external_connection.export
	);

	lab8_soc_BEGINPOINT path3 (
		.clk        (clk_clk),                               //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),       //               reset.reset_n
		.address    (mm_interconnect_0_path3_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_path3_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_path3_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_path3_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_path3_s1_readdata),   //                    .readdata
		.out_port   (path3_export)                           // external_connection.export
	);

	lab8_soc_BEGINPOINT path4 (
		.clk        (clk_clk),                               //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),       //               reset.reset_n
		.address    (mm_interconnect_0_path4_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_path4_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_path4_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_path4_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_path4_s1_readdata),   //                    .readdata
		.out_port   (path4_export)                           // external_connection.export
	);

	lab8_soc_POS_X pos_x (
		.clk      (clk_clk),                             //                 clk.clk
		.reset_n  (~rst_controller_reset_out_reset),     //               reset.reset_n
		.address  (mm_interconnect_0_pos_x_s1_address),  //                  s1.address
		.readdata (mm_interconnect_0_pos_x_s1_readdata), //                    .readdata
		.in_port  (pos_x_export)                         // external_connection.export
	);

	lab8_soc_POS_X pos_y (
		.clk      (clk_clk),                             //                 clk.clk
		.reset_n  (~rst_controller_reset_out_reset),     //               reset.reset_n
		.address  (mm_interconnect_0_pos_y_s1_address),  //                  s1.address
		.readdata (mm_interconnect_0_pos_y_s1_readdata), //                    .readdata
		.in_port  (pos_y_export)                         // external_connection.export
	);

	lab8_soc_SOURCE_INDEX source_index (
		.clk        (clk_clk),                                      //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),              //               reset.reset_n
		.address    (mm_interconnect_0_source_index_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_source_index_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_source_index_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_source_index_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_source_index_s1_readdata),   //                    .readdata
		.out_port   (source_index_acc_export)                       // external_connection.export
	);

	lab8_soc_START start (
		.clk        (clk_clk),                               //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),       //               reset.reset_n
		.address    (mm_interconnect_0_start_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_start_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_start_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_start_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_start_s1_readdata),   //                    .readdata
		.out_port   (start_acc_export)                       // external_connection.export
	);

	lab8_soc_SOURCE_INDEX target_index (
		.clk        (clk_clk),                                      //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),              //               reset.reset_n
		.address    (mm_interconnect_0_target_index_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_target_index_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_target_index_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_target_index_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_target_index_s1_readdata),   //                    .readdata
		.out_port   (target_index_acc_export)                       // external_connection.export
	);

	lab8_soc_BEGINPOINT distancehigh (
		.clk        (clk_clk),                                      //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),              //               reset.reset_n
		.address    (mm_interconnect_0_distancehigh_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_distancehigh_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_distancehigh_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_distancehigh_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_distancehigh_s1_readdata),   //                    .readdata
		.out_port   (distancehigh_export)                           // external_connection.export
	);

	lab8_soc_BEGINPOINT distancelow (
		.clk        (clk_clk),                                     //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),             //               reset.reset_n
		.address    (mm_interconnect_0_distancelow_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_distancelow_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_distancelow_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_distancelow_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_distancelow_s1_readdata),   //                    .readdata
		.out_port   (distancelow_export)                           // external_connection.export
	);

	lab8_soc_jtag_uart_0 jtag_uart_0 (
		.clk            (clk_clk),                                                     //               clk.clk
		.rst_n          (~rst_controller_reset_out_reset),                             //             reset.reset_n
		.av_chipselect  (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_chipselect),  // avalon_jtag_slave.chipselect
		.av_address     (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_address),     //                  .address
		.av_read_n      (~mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_read),       //                  .read_n
		.av_readdata    (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_readdata),    //                  .readdata
		.av_write_n     (~mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_write),      //                  .write_n
		.av_writedata   (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_writedata),   //                  .writedata
		.av_waitrequest (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_waitrequest), //                  .waitrequest
		.av_irq         (irq_mapper_receiver0_irq)                                     //               irq.irq
	);

	lab8_soc_SOURCE_INDEX keycode (
		.clk        (clk_clk),                                 //                 clk.clk
		.reset_n    (~rst_controller_001_reset_out_reset),     //               reset.reset_n
		.address    (mm_interconnect_0_keycode_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_keycode_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_keycode_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_keycode_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_keycode_s1_readdata),   //                    .readdata
		.out_port   (keycode_export)                           // external_connection.export
	);

	lab8_soc_nios2_gen2_0 nios2_gen2_0 (
		.clk                                 (clk_clk),                                                    //                       clk.clk
		.reset_n                             (~rst_controller_001_reset_out_reset),                        //                     reset.reset_n
		.reset_req                           (rst_controller_001_reset_out_reset_req),                     //                          .reset_req
		.d_address                           (nios2_gen2_0_data_master_address),                           //               data_master.address
		.d_byteenable                        (nios2_gen2_0_data_master_byteenable),                        //                          .byteenable
		.d_read                              (nios2_gen2_0_data_master_read),                              //                          .read
		.d_readdata                          (nios2_gen2_0_data_master_readdata),                          //                          .readdata
		.d_waitrequest                       (nios2_gen2_0_data_master_waitrequest),                       //                          .waitrequest
		.d_write                             (nios2_gen2_0_data_master_write),                             //                          .write
		.d_writedata                         (nios2_gen2_0_data_master_writedata),                         //                          .writedata
		.debug_mem_slave_debugaccess_to_roms (nios2_gen2_0_data_master_debugaccess),                       //                          .debugaccess
		.i_address                           (nios2_gen2_0_instruction_master_address),                    //        instruction_master.address
		.i_read                              (nios2_gen2_0_instruction_master_read),                       //                          .read
		.i_readdata                          (nios2_gen2_0_instruction_master_readdata),                   //                          .readdata
		.i_waitrequest                       (nios2_gen2_0_instruction_master_waitrequest),                //                          .waitrequest
		.irq                                 (nios2_gen2_0_irq_irq),                                       //                       irq.irq
		.debug_reset_request                 (nios2_gen2_0_debug_reset_request_reset),                     //       debug_reset_request.reset
		.debug_mem_slave_address             (mm_interconnect_0_nios2_gen2_0_debug_mem_slave_address),     //           debug_mem_slave.address
		.debug_mem_slave_byteenable          (mm_interconnect_0_nios2_gen2_0_debug_mem_slave_byteenable),  //                          .byteenable
		.debug_mem_slave_debugaccess         (mm_interconnect_0_nios2_gen2_0_debug_mem_slave_debugaccess), //                          .debugaccess
		.debug_mem_slave_read                (mm_interconnect_0_nios2_gen2_0_debug_mem_slave_read),        //                          .read
		.debug_mem_slave_readdata            (mm_interconnect_0_nios2_gen2_0_debug_mem_slave_readdata),    //                          .readdata
		.debug_mem_slave_waitrequest         (mm_interconnect_0_nios2_gen2_0_debug_mem_slave_waitrequest), //                          .waitrequest
		.debug_mem_slave_write               (mm_interconnect_0_nios2_gen2_0_debug_mem_slave_write),       //                          .write
		.debug_mem_slave_writedata           (mm_interconnect_0_nios2_gen2_0_debug_mem_slave_writedata),   //                          .writedata
		.dummy_ci_port                       ()                                                            // custom_instruction_master.readra
	);

	lab8_soc_onchip_memory2_0 onchip_memory2_0 (
		.clk        (clk_clk),                                          //   clk1.clk
		.address    (mm_interconnect_0_onchip_memory2_0_s1_address),    //     s1.address
		.clken      (mm_interconnect_0_onchip_memory2_0_s1_clken),      //       .clken
		.chipselect (mm_interconnect_0_onchip_memory2_0_s1_chipselect), //       .chipselect
		.write      (mm_interconnect_0_onchip_memory2_0_s1_write),      //       .write
		.readdata   (mm_interconnect_0_onchip_memory2_0_s1_readdata),   //       .readdata
		.writedata  (mm_interconnect_0_onchip_memory2_0_s1_writedata),  //       .writedata
		.byteenable (mm_interconnect_0_onchip_memory2_0_s1_byteenable), //       .byteenable
		.reset      (rst_controller_001_reset_out_reset),               // reset1.reset
		.reset_req  (rst_controller_001_reset_out_reset_req),           //       .reset_req
		.freeze     (1'b0)                                              // (terminated)
	);

	lab8_soc_otg_hpi_address otg_hpi_address (
		.clk        (clk_clk),                                         //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),                 //               reset.reset_n
		.address    (mm_interconnect_0_otg_hpi_address_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_otg_hpi_address_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_otg_hpi_address_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_otg_hpi_address_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_otg_hpi_address_s1_readdata),   //                    .readdata
		.out_port   (otg_hpi_address_export)                           // external_connection.export
	);

	lab8_soc_START otg_hpi_cs (
		.clk        (clk_clk),                                    //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),            //               reset.reset_n
		.address    (mm_interconnect_0_otg_hpi_cs_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_otg_hpi_cs_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_otg_hpi_cs_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_otg_hpi_cs_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_otg_hpi_cs_s1_readdata),   //                    .readdata
		.out_port   (otg_hpi_cs_export)                           // external_connection.export
	);

	lab8_soc_otg_hpi_data otg_hpi_data (
		.clk        (clk_clk),                                      //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),              //               reset.reset_n
		.address    (mm_interconnect_0_otg_hpi_data_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_otg_hpi_data_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_otg_hpi_data_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_otg_hpi_data_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_otg_hpi_data_s1_readdata),   //                    .readdata
		.in_port    (otg_hpi_data_in_port),                         // external_connection.export
		.out_port   (otg_hpi_data_out_port)                         //                    .export
	);

	lab8_soc_START otg_hpi_r (
		.clk        (clk_clk),                                   //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),           //               reset.reset_n
		.address    (mm_interconnect_0_otg_hpi_r_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_otg_hpi_r_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_otg_hpi_r_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_otg_hpi_r_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_otg_hpi_r_s1_readdata),   //                    .readdata
		.out_port   (otg_hpi_r_export)                           // external_connection.export
	);

	lab8_soc_START otg_hpi_reset (
		.clk        (clk_clk),                                       //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),               //               reset.reset_n
		.address    (mm_interconnect_0_otg_hpi_reset_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_otg_hpi_reset_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_otg_hpi_reset_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_otg_hpi_reset_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_otg_hpi_reset_s1_readdata),   //                    .readdata
		.out_port   (otg_hpi_reset_export)                           // external_connection.export
	);

	lab8_soc_START otg_hpi_w (
		.clk        (clk_clk),                                   //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),           //               reset.reset_n
		.address    (mm_interconnect_0_otg_hpi_w_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_otg_hpi_w_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_otg_hpi_w_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_otg_hpi_w_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_otg_hpi_w_s1_readdata),   //                    .readdata
		.out_port   (otg_hpi_w_export)                           // external_connection.export
	);

	lab8_soc_sdram sdram (
		.clk            (sdram_pll_c0_clk),                         //   clk.clk
		.reset_n        (~rst_controller_002_reset_out_reset),      // reset.reset_n
		.az_addr        (mm_interconnect_0_sdram_s1_address),       //    s1.address
		.az_be_n        (~mm_interconnect_0_sdram_s1_byteenable),   //      .byteenable_n
		.az_cs          (mm_interconnect_0_sdram_s1_chipselect),    //      .chipselect
		.az_data        (mm_interconnect_0_sdram_s1_writedata),     //      .writedata
		.az_rd_n        (~mm_interconnect_0_sdram_s1_read),         //      .read_n
		.az_wr_n        (~mm_interconnect_0_sdram_s1_write),        //      .write_n
		.za_data        (mm_interconnect_0_sdram_s1_readdata),      //      .readdata
		.za_valid       (mm_interconnect_0_sdram_s1_readdatavalid), //      .readdatavalid
		.za_waitrequest (mm_interconnect_0_sdram_s1_waitrequest),   //      .waitrequest
		.zs_addr        (sdram_wire_addr),                          //  wire.export
		.zs_ba          (sdram_wire_ba),                            //      .export
		.zs_cas_n       (sdram_wire_cas_n),                         //      .export
		.zs_cke         (sdram_wire_cke),                           //      .export
		.zs_cs_n        (sdram_wire_cs_n),                          //      .export
		.zs_dq          (sdram_wire_dq),                            //      .export
		.zs_dqm         (sdram_wire_dqm),                           //      .export
		.zs_ras_n       (sdram_wire_ras_n),                         //      .export
		.zs_we_n        (sdram_wire_we_n)                           //      .export
	);

	lab8_soc_sdram_pll sdram_pll (
		.clk                (clk_clk),                                         //       inclk_interface.clk
		.reset              (rst_controller_001_reset_out_reset),              // inclk_interface_reset.reset
		.read               (mm_interconnect_0_sdram_pll_pll_slave_read),      //             pll_slave.read
		.write              (mm_interconnect_0_sdram_pll_pll_slave_write),     //                      .write
		.address            (mm_interconnect_0_sdram_pll_pll_slave_address),   //                      .address
		.readdata           (mm_interconnect_0_sdram_pll_pll_slave_readdata),  //                      .readdata
		.writedata          (mm_interconnect_0_sdram_pll_pll_slave_writedata), //                      .writedata
		.c0                 (sdram_pll_c0_clk),                                //                    c0.clk
		.c1                 (sdram_clk_clk),                                   //                    c1.clk
		.scandone           (),                                                //           (terminated)
		.scandataout        (),                                                //           (terminated)
		.areset             (1'b0),                                            //           (terminated)
		.locked             (),                                                //           (terminated)
		.phasedone          (),                                                //           (terminated)
		.phasecounterselect (4'b0000),                                         //           (terminated)
		.phaseupdown        (1'b0),                                            //           (terminated)
		.phasestep          (1'b0),                                            //           (terminated)
		.scanclk            (1'b0),                                            //           (terminated)
		.scanclkena         (1'b0),                                            //           (terminated)
		.scandata           (1'b0),                                            //           (terminated)
		.configupdate       (1'b0)                                             //           (terminated)
	);

	lab8_soc_sysid_qsys_0 sysid_qsys_0 (
		.clock    (clk_clk),                                               //           clk.clk
		.reset_n  (~rst_controller_001_reset_out_reset),                   //         reset.reset_n
		.readdata (mm_interconnect_0_sysid_qsys_0_control_slave_readdata), // control_slave.readdata
		.address  (mm_interconnect_0_sysid_qsys_0_control_slave_address)   //              .address
	);

	lab8_soc_timer_0 timer_0 (
		.clk        (clk_clk),                                 //   clk.clk
		.reset_n    (~rst_controller_001_reset_out_reset),     // reset.reset_n
		.address    (mm_interconnect_0_timer_0_s1_address),    //    s1.address
		.writedata  (mm_interconnect_0_timer_0_s1_writedata),  //      .writedata
		.readdata   (mm_interconnect_0_timer_0_s1_readdata),   //      .readdata
		.chipselect (mm_interconnect_0_timer_0_s1_chipselect), //      .chipselect
		.write_n    (~mm_interconnect_0_timer_0_s1_write),     //      .write_n
		.irq        (irq_mapper_receiver1_irq)                 //   irq.irq
	);

	lab8_soc_mm_interconnect_0 mm_interconnect_0 (
		.clk_0_clk_clk                                  (clk_clk),                                                     //                                clk_0_clk.clk
		.sdram_pll_c0_clk                               (sdram_pll_c0_clk),                                            //                             sdram_pll_c0.clk
		.jtag_uart_0_reset_reset_bridge_in_reset_reset  (rst_controller_reset_out_reset),                              //  jtag_uart_0_reset_reset_bridge_in_reset.reset
		.nios2_gen2_0_reset_reset_bridge_in_reset_reset (rst_controller_001_reset_out_reset),                          // nios2_gen2_0_reset_reset_bridge_in_reset.reset
		.sdram_reset_reset_bridge_in_reset_reset        (rst_controller_002_reset_out_reset),                          //        sdram_reset_reset_bridge_in_reset.reset
		.nios2_gen2_0_data_master_address               (nios2_gen2_0_data_master_address),                            //                 nios2_gen2_0_data_master.address
		.nios2_gen2_0_data_master_waitrequest           (nios2_gen2_0_data_master_waitrequest),                        //                                         .waitrequest
		.nios2_gen2_0_data_master_byteenable            (nios2_gen2_0_data_master_byteenable),                         //                                         .byteenable
		.nios2_gen2_0_data_master_read                  (nios2_gen2_0_data_master_read),                               //                                         .read
		.nios2_gen2_0_data_master_readdata              (nios2_gen2_0_data_master_readdata),                           //                                         .readdata
		.nios2_gen2_0_data_master_write                 (nios2_gen2_0_data_master_write),                              //                                         .write
		.nios2_gen2_0_data_master_writedata             (nios2_gen2_0_data_master_writedata),                          //                                         .writedata
		.nios2_gen2_0_data_master_debugaccess           (nios2_gen2_0_data_master_debugaccess),                        //                                         .debugaccess
		.nios2_gen2_0_instruction_master_address        (nios2_gen2_0_instruction_master_address),                     //          nios2_gen2_0_instruction_master.address
		.nios2_gen2_0_instruction_master_waitrequest    (nios2_gen2_0_instruction_master_waitrequest),                 //                                         .waitrequest
		.nios2_gen2_0_instruction_master_read           (nios2_gen2_0_instruction_master_read),                        //                                         .read
		.nios2_gen2_0_instruction_master_readdata       (nios2_gen2_0_instruction_master_readdata),                    //                                         .readdata
		.BEGINPOINT_s1_address                          (mm_interconnect_0_beginpoint_s1_address),                     //                            BEGINPOINT_s1.address
		.BEGINPOINT_s1_write                            (mm_interconnect_0_beginpoint_s1_write),                       //                                         .write
		.BEGINPOINT_s1_readdata                         (mm_interconnect_0_beginpoint_s1_readdata),                    //                                         .readdata
		.BEGINPOINT_s1_writedata                        (mm_interconnect_0_beginpoint_s1_writedata),                   //                                         .writedata
		.BEGINPOINT_s1_chipselect                       (mm_interconnect_0_beginpoint_s1_chipselect),                  //                                         .chipselect
		.DEBUG_MIN_INDEX_s1_address                     (mm_interconnect_0_debug_min_index_s1_address),                //                       DEBUG_MIN_INDEX_s1.address
		.DEBUG_MIN_INDEX_s1_readdata                    (mm_interconnect_0_debug_min_index_s1_readdata),               //                                         .readdata
		.DEBUG_MIN_NUM_s1_address                       (mm_interconnect_0_debug_min_num_s1_address),                  //                         DEBUG_MIN_NUM_s1.address
		.DEBUG_MIN_NUM_s1_readdata                      (mm_interconnect_0_debug_min_num_s1_readdata),                 //                                         .readdata
		.DEBUG_STATE_s1_address                         (mm_interconnect_0_debug_state_s1_address),                    //                           DEBUG_STATE_s1.address
		.DEBUG_STATE_s1_readdata                        (mm_interconnect_0_debug_state_s1_readdata),                   //                                         .readdata
		.distancehigh_s1_address                        (mm_interconnect_0_distancehigh_s1_address),                   //                          distancehigh_s1.address
		.distancehigh_s1_write                          (mm_interconnect_0_distancehigh_s1_write),                     //                                         .write
		.distancehigh_s1_readdata                       (mm_interconnect_0_distancehigh_s1_readdata),                  //                                         .readdata
		.distancehigh_s1_writedata                      (mm_interconnect_0_distancehigh_s1_writedata),                 //                                         .writedata
		.distancehigh_s1_chipselect                     (mm_interconnect_0_distancehigh_s1_chipselect),                //                                         .chipselect
		.distancelow_s1_address                         (mm_interconnect_0_distancelow_s1_address),                    //                           distancelow_s1.address
		.distancelow_s1_write                           (mm_interconnect_0_distancelow_s1_write),                      //                                         .write
		.distancelow_s1_readdata                        (mm_interconnect_0_distancelow_s1_readdata),                   //                                         .readdata
		.distancelow_s1_writedata                       (mm_interconnect_0_distancelow_s1_writedata),                  //                                         .writedata
		.distancelow_s1_chipselect                      (mm_interconnect_0_distancelow_s1_chipselect),                 //                                         .chipselect
		.ENDPOINT_s1_address                            (mm_interconnect_0_endpoint_s1_address),                       //                              ENDPOINT_s1.address
		.ENDPOINT_s1_write                              (mm_interconnect_0_endpoint_s1_write),                         //                                         .write
		.ENDPOINT_s1_readdata                           (mm_interconnect_0_endpoint_s1_readdata),                      //                                         .readdata
		.ENDPOINT_s1_writedata                          (mm_interconnect_0_endpoint_s1_writedata),                     //                                         .writedata
		.ENDPOINT_s1_chipselect                         (mm_interconnect_0_endpoint_s1_chipselect),                    //                                         .chipselect
		.FINISH_s1_address                              (mm_interconnect_0_finish_s1_address),                         //                                FINISH_s1.address
		.FINISH_s1_readdata                             (mm_interconnect_0_finish_s1_readdata),                        //                                         .readdata
		.jtag_uart_0_avalon_jtag_slave_address          (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_address),     //            jtag_uart_0_avalon_jtag_slave.address
		.jtag_uart_0_avalon_jtag_slave_write            (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_write),       //                                         .write
		.jtag_uart_0_avalon_jtag_slave_read             (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_read),        //                                         .read
		.jtag_uart_0_avalon_jtag_slave_readdata         (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_readdata),    //                                         .readdata
		.jtag_uart_0_avalon_jtag_slave_writedata        (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_writedata),   //                                         .writedata
		.jtag_uart_0_avalon_jtag_slave_waitrequest      (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_waitrequest), //                                         .waitrequest
		.jtag_uart_0_avalon_jtag_slave_chipselect       (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_chipselect),  //                                         .chipselect
		.keycode_s1_address                             (mm_interconnect_0_keycode_s1_address),                        //                               keycode_s1.address
		.keycode_s1_write                               (mm_interconnect_0_keycode_s1_write),                          //                                         .write
		.keycode_s1_readdata                            (mm_interconnect_0_keycode_s1_readdata),                       //                                         .readdata
		.keycode_s1_writedata                           (mm_interconnect_0_keycode_s1_writedata),                      //                                         .writedata
		.keycode_s1_chipselect                          (mm_interconnect_0_keycode_s1_chipselect),                     //                                         .chipselect
		.MIN_PATH_LENGTH_s1_address                     (mm_interconnect_0_min_path_length_s1_address),                //                       MIN_PATH_LENGTH_s1.address
		.MIN_PATH_LENGTH_s1_readdata                    (mm_interconnect_0_min_path_length_s1_readdata),               //                                         .readdata
		.nios2_gen2_0_debug_mem_slave_address           (mm_interconnect_0_nios2_gen2_0_debug_mem_slave_address),      //             nios2_gen2_0_debug_mem_slave.address
		.nios2_gen2_0_debug_mem_slave_write             (mm_interconnect_0_nios2_gen2_0_debug_mem_slave_write),        //                                         .write
		.nios2_gen2_0_debug_mem_slave_read              (mm_interconnect_0_nios2_gen2_0_debug_mem_slave_read),         //                                         .read
		.nios2_gen2_0_debug_mem_slave_readdata          (mm_interconnect_0_nios2_gen2_0_debug_mem_slave_readdata),     //                                         .readdata
		.nios2_gen2_0_debug_mem_slave_writedata         (mm_interconnect_0_nios2_gen2_0_debug_mem_slave_writedata),    //                                         .writedata
		.nios2_gen2_0_debug_mem_slave_byteenable        (mm_interconnect_0_nios2_gen2_0_debug_mem_slave_byteenable),   //                                         .byteenable
		.nios2_gen2_0_debug_mem_slave_waitrequest       (mm_interconnect_0_nios2_gen2_0_debug_mem_slave_waitrequest),  //                                         .waitrequest
		.nios2_gen2_0_debug_mem_slave_debugaccess       (mm_interconnect_0_nios2_gen2_0_debug_mem_slave_debugaccess),  //                                         .debugaccess
		.onchip_memory2_0_s1_address                    (mm_interconnect_0_onchip_memory2_0_s1_address),               //                      onchip_memory2_0_s1.address
		.onchip_memory2_0_s1_write                      (mm_interconnect_0_onchip_memory2_0_s1_write),                 //                                         .write
		.onchip_memory2_0_s1_readdata                   (mm_interconnect_0_onchip_memory2_0_s1_readdata),              //                                         .readdata
		.onchip_memory2_0_s1_writedata                  (mm_interconnect_0_onchip_memory2_0_s1_writedata),             //                                         .writedata
		.onchip_memory2_0_s1_byteenable                 (mm_interconnect_0_onchip_memory2_0_s1_byteenable),            //                                         .byteenable
		.onchip_memory2_0_s1_chipselect                 (mm_interconnect_0_onchip_memory2_0_s1_chipselect),            //                                         .chipselect
		.onchip_memory2_0_s1_clken                      (mm_interconnect_0_onchip_memory2_0_s1_clken),                 //                                         .clken
		.otg_hpi_address_s1_address                     (mm_interconnect_0_otg_hpi_address_s1_address),                //                       otg_hpi_address_s1.address
		.otg_hpi_address_s1_write                       (mm_interconnect_0_otg_hpi_address_s1_write),                  //                                         .write
		.otg_hpi_address_s1_readdata                    (mm_interconnect_0_otg_hpi_address_s1_readdata),               //                                         .readdata
		.otg_hpi_address_s1_writedata                   (mm_interconnect_0_otg_hpi_address_s1_writedata),              //                                         .writedata
		.otg_hpi_address_s1_chipselect                  (mm_interconnect_0_otg_hpi_address_s1_chipselect),             //                                         .chipselect
		.otg_hpi_cs_s1_address                          (mm_interconnect_0_otg_hpi_cs_s1_address),                     //                            otg_hpi_cs_s1.address
		.otg_hpi_cs_s1_write                            (mm_interconnect_0_otg_hpi_cs_s1_write),                       //                                         .write
		.otg_hpi_cs_s1_readdata                         (mm_interconnect_0_otg_hpi_cs_s1_readdata),                    //                                         .readdata
		.otg_hpi_cs_s1_writedata                        (mm_interconnect_0_otg_hpi_cs_s1_writedata),                   //                                         .writedata
		.otg_hpi_cs_s1_chipselect                       (mm_interconnect_0_otg_hpi_cs_s1_chipselect),                  //                                         .chipselect
		.otg_hpi_data_s1_address                        (mm_interconnect_0_otg_hpi_data_s1_address),                   //                          otg_hpi_data_s1.address
		.otg_hpi_data_s1_write                          (mm_interconnect_0_otg_hpi_data_s1_write),                     //                                         .write
		.otg_hpi_data_s1_readdata                       (mm_interconnect_0_otg_hpi_data_s1_readdata),                  //                                         .readdata
		.otg_hpi_data_s1_writedata                      (mm_interconnect_0_otg_hpi_data_s1_writedata),                 //                                         .writedata
		.otg_hpi_data_s1_chipselect                     (mm_interconnect_0_otg_hpi_data_s1_chipselect),                //                                         .chipselect
		.otg_hpi_r_s1_address                           (mm_interconnect_0_otg_hpi_r_s1_address),                      //                             otg_hpi_r_s1.address
		.otg_hpi_r_s1_write                             (mm_interconnect_0_otg_hpi_r_s1_write),                        //                                         .write
		.otg_hpi_r_s1_readdata                          (mm_interconnect_0_otg_hpi_r_s1_readdata),                     //                                         .readdata
		.otg_hpi_r_s1_writedata                         (mm_interconnect_0_otg_hpi_r_s1_writedata),                    //                                         .writedata
		.otg_hpi_r_s1_chipselect                        (mm_interconnect_0_otg_hpi_r_s1_chipselect),                   //                                         .chipselect
		.otg_hpi_reset_s1_address                       (mm_interconnect_0_otg_hpi_reset_s1_address),                  //                         otg_hpi_reset_s1.address
		.otg_hpi_reset_s1_write                         (mm_interconnect_0_otg_hpi_reset_s1_write),                    //                                         .write
		.otg_hpi_reset_s1_readdata                      (mm_interconnect_0_otg_hpi_reset_s1_readdata),                 //                                         .readdata
		.otg_hpi_reset_s1_writedata                     (mm_interconnect_0_otg_hpi_reset_s1_writedata),                //                                         .writedata
		.otg_hpi_reset_s1_chipselect                    (mm_interconnect_0_otg_hpi_reset_s1_chipselect),               //                                         .chipselect
		.otg_hpi_w_s1_address                           (mm_interconnect_0_otg_hpi_w_s1_address),                      //                             otg_hpi_w_s1.address
		.otg_hpi_w_s1_write                             (mm_interconnect_0_otg_hpi_w_s1_write),                        //                                         .write
		.otg_hpi_w_s1_readdata                          (mm_interconnect_0_otg_hpi_w_s1_readdata),                     //                                         .readdata
		.otg_hpi_w_s1_writedata                         (mm_interconnect_0_otg_hpi_w_s1_writedata),                    //                                         .writedata
		.otg_hpi_w_s1_chipselect                        (mm_interconnect_0_otg_hpi_w_s1_chipselect),                   //                                         .chipselect
		.PATH1_s1_address                               (mm_interconnect_0_path1_s1_address),                          //                                 PATH1_s1.address
		.PATH1_s1_write                                 (mm_interconnect_0_path1_s1_write),                            //                                         .write
		.PATH1_s1_readdata                              (mm_interconnect_0_path1_s1_readdata),                         //                                         .readdata
		.PATH1_s1_writedata                             (mm_interconnect_0_path1_s1_writedata),                        //                                         .writedata
		.PATH1_s1_chipselect                            (mm_interconnect_0_path1_s1_chipselect),                       //                                         .chipselect
		.PATH2_s1_address                               (mm_interconnect_0_path2_s1_address),                          //                                 PATH2_s1.address
		.PATH2_s1_write                                 (mm_interconnect_0_path2_s1_write),                            //                                         .write
		.PATH2_s1_readdata                              (mm_interconnect_0_path2_s1_readdata),                         //                                         .readdata
		.PATH2_s1_writedata                             (mm_interconnect_0_path2_s1_writedata),                        //                                         .writedata
		.PATH2_s1_chipselect                            (mm_interconnect_0_path2_s1_chipselect),                       //                                         .chipselect
		.PATH3_s1_address                               (mm_interconnect_0_path3_s1_address),                          //                                 PATH3_s1.address
		.PATH3_s1_write                                 (mm_interconnect_0_path3_s1_write),                            //                                         .write
		.PATH3_s1_readdata                              (mm_interconnect_0_path3_s1_readdata),                         //                                         .readdata
		.PATH3_s1_writedata                             (mm_interconnect_0_path3_s1_writedata),                        //                                         .writedata
		.PATH3_s1_chipselect                            (mm_interconnect_0_path3_s1_chipselect),                       //                                         .chipselect
		.PATH4_s1_address                               (mm_interconnect_0_path4_s1_address),                          //                                 PATH4_s1.address
		.PATH4_s1_write                                 (mm_interconnect_0_path4_s1_write),                            //                                         .write
		.PATH4_s1_readdata                              (mm_interconnect_0_path4_s1_readdata),                         //                                         .readdata
		.PATH4_s1_writedata                             (mm_interconnect_0_path4_s1_writedata),                        //                                         .writedata
		.PATH4_s1_chipselect                            (mm_interconnect_0_path4_s1_chipselect),                       //                                         .chipselect
		.POS_X_s1_address                               (mm_interconnect_0_pos_x_s1_address),                          //                                 POS_X_s1.address
		.POS_X_s1_readdata                              (mm_interconnect_0_pos_x_s1_readdata),                         //                                         .readdata
		.POS_Y_s1_address                               (mm_interconnect_0_pos_y_s1_address),                          //                                 POS_Y_s1.address
		.POS_Y_s1_readdata                              (mm_interconnect_0_pos_y_s1_readdata),                         //                                         .readdata
		.sdram_s1_address                               (mm_interconnect_0_sdram_s1_address),                          //                                 sdram_s1.address
		.sdram_s1_write                                 (mm_interconnect_0_sdram_s1_write),                            //                                         .write
		.sdram_s1_read                                  (mm_interconnect_0_sdram_s1_read),                             //                                         .read
		.sdram_s1_readdata                              (mm_interconnect_0_sdram_s1_readdata),                         //                                         .readdata
		.sdram_s1_writedata                             (mm_interconnect_0_sdram_s1_writedata),                        //                                         .writedata
		.sdram_s1_byteenable                            (mm_interconnect_0_sdram_s1_byteenable),                       //                                         .byteenable
		.sdram_s1_readdatavalid                         (mm_interconnect_0_sdram_s1_readdatavalid),                    //                                         .readdatavalid
		.sdram_s1_waitrequest                           (mm_interconnect_0_sdram_s1_waitrequest),                      //                                         .waitrequest
		.sdram_s1_chipselect                            (mm_interconnect_0_sdram_s1_chipselect),                       //                                         .chipselect
		.sdram_pll_pll_slave_address                    (mm_interconnect_0_sdram_pll_pll_slave_address),               //                      sdram_pll_pll_slave.address
		.sdram_pll_pll_slave_write                      (mm_interconnect_0_sdram_pll_pll_slave_write),                 //                                         .write
		.sdram_pll_pll_slave_read                       (mm_interconnect_0_sdram_pll_pll_slave_read),                  //                                         .read
		.sdram_pll_pll_slave_readdata                   (mm_interconnect_0_sdram_pll_pll_slave_readdata),              //                                         .readdata
		.sdram_pll_pll_slave_writedata                  (mm_interconnect_0_sdram_pll_pll_slave_writedata),             //                                         .writedata
		.SOURCE_INDEX_s1_address                        (mm_interconnect_0_source_index_s1_address),                   //                          SOURCE_INDEX_s1.address
		.SOURCE_INDEX_s1_write                          (mm_interconnect_0_source_index_s1_write),                     //                                         .write
		.SOURCE_INDEX_s1_readdata                       (mm_interconnect_0_source_index_s1_readdata),                  //                                         .readdata
		.SOURCE_INDEX_s1_writedata                      (mm_interconnect_0_source_index_s1_writedata),                 //                                         .writedata
		.SOURCE_INDEX_s1_chipselect                     (mm_interconnect_0_source_index_s1_chipselect),                //                                         .chipselect
		.START_s1_address                               (mm_interconnect_0_start_s1_address),                          //                                 START_s1.address
		.START_s1_write                                 (mm_interconnect_0_start_s1_write),                            //                                         .write
		.START_s1_readdata                              (mm_interconnect_0_start_s1_readdata),                         //                                         .readdata
		.START_s1_writedata                             (mm_interconnect_0_start_s1_writedata),                        //                                         .writedata
		.START_s1_chipselect                            (mm_interconnect_0_start_s1_chipselect),                       //                                         .chipselect
		.sysid_qsys_0_control_slave_address             (mm_interconnect_0_sysid_qsys_0_control_slave_address),        //               sysid_qsys_0_control_slave.address
		.sysid_qsys_0_control_slave_readdata            (mm_interconnect_0_sysid_qsys_0_control_slave_readdata),       //                                         .readdata
		.TARGET_INDEX_s1_address                        (mm_interconnect_0_target_index_s1_address),                   //                          TARGET_INDEX_s1.address
		.TARGET_INDEX_s1_write                          (mm_interconnect_0_target_index_s1_write),                     //                                         .write
		.TARGET_INDEX_s1_readdata                       (mm_interconnect_0_target_index_s1_readdata),                  //                                         .readdata
		.TARGET_INDEX_s1_writedata                      (mm_interconnect_0_target_index_s1_writedata),                 //                                         .writedata
		.TARGET_INDEX_s1_chipselect                     (mm_interconnect_0_target_index_s1_chipselect),                //                                         .chipselect
		.timer_0_s1_address                             (mm_interconnect_0_timer_0_s1_address),                        //                               timer_0_s1.address
		.timer_0_s1_write                               (mm_interconnect_0_timer_0_s1_write),                          //                                         .write
		.timer_0_s1_readdata                            (mm_interconnect_0_timer_0_s1_readdata),                       //                                         .readdata
		.timer_0_s1_writedata                           (mm_interconnect_0_timer_0_s1_writedata),                      //                                         .writedata
		.timer_0_s1_chipselect                          (mm_interconnect_0_timer_0_s1_chipselect)                      //                                         .chipselect
	);

	lab8_soc_irq_mapper irq_mapper (
		.clk           (clk_clk),                            //       clk.clk
		.reset         (rst_controller_001_reset_out_reset), // clk_reset.reset
		.receiver0_irq (irq_mapper_receiver0_irq),           // receiver0.irq
		.receiver1_irq (irq_mapper_receiver1_irq),           // receiver1.irq
		.sender_irq    (nios2_gen2_0_irq_irq)                //    sender.irq
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~reset_reset_n),                 // reset_in0.reset
		.clk            (clk_clk),                        //       clk.clk
		.reset_out      (rst_controller_reset_out_reset), // reset_out.reset
		.reset_req      (),                               // (terminated)
		.reset_req_in0  (1'b0),                           // (terminated)
		.reset_in1      (1'b0),                           // (terminated)
		.reset_req_in1  (1'b0),                           // (terminated)
		.reset_in2      (1'b0),                           // (terminated)
		.reset_req_in2  (1'b0),                           // (terminated)
		.reset_in3      (1'b0),                           // (terminated)
		.reset_req_in3  (1'b0),                           // (terminated)
		.reset_in4      (1'b0),                           // (terminated)
		.reset_req_in4  (1'b0),                           // (terminated)
		.reset_in5      (1'b0),                           // (terminated)
		.reset_req_in5  (1'b0),                           // (terminated)
		.reset_in6      (1'b0),                           // (terminated)
		.reset_req_in6  (1'b0),                           // (terminated)
		.reset_in7      (1'b0),                           // (terminated)
		.reset_req_in7  (1'b0),                           // (terminated)
		.reset_in8      (1'b0),                           // (terminated)
		.reset_req_in8  (1'b0),                           // (terminated)
		.reset_in9      (1'b0),                           // (terminated)
		.reset_req_in9  (1'b0),                           // (terminated)
		.reset_in10     (1'b0),                           // (terminated)
		.reset_req_in10 (1'b0),                           // (terminated)
		.reset_in11     (1'b0),                           // (terminated)
		.reset_req_in11 (1'b0),                           // (terminated)
		.reset_in12     (1'b0),                           // (terminated)
		.reset_req_in12 (1'b0),                           // (terminated)
		.reset_in13     (1'b0),                           // (terminated)
		.reset_req_in13 (1'b0),                           // (terminated)
		.reset_in14     (1'b0),                           // (terminated)
		.reset_req_in14 (1'b0),                           // (terminated)
		.reset_in15     (1'b0),                           // (terminated)
		.reset_req_in15 (1'b0)                            // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (1),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_001 (
		.reset_in0      (~reset_reset_n),                         // reset_in0.reset
		.reset_in1      (nios2_gen2_0_debug_reset_request_reset), // reset_in1.reset
		.clk            (clk_clk),                                //       clk.clk
		.reset_out      (rst_controller_001_reset_out_reset),     // reset_out.reset
		.reset_req      (rst_controller_001_reset_out_reset_req), //          .reset_req
		.reset_req_in0  (1'b0),                                   // (terminated)
		.reset_req_in1  (1'b0),                                   // (terminated)
		.reset_in2      (1'b0),                                   // (terminated)
		.reset_req_in2  (1'b0),                                   // (terminated)
		.reset_in3      (1'b0),                                   // (terminated)
		.reset_req_in3  (1'b0),                                   // (terminated)
		.reset_in4      (1'b0),                                   // (terminated)
		.reset_req_in4  (1'b0),                                   // (terminated)
		.reset_in5      (1'b0),                                   // (terminated)
		.reset_req_in5  (1'b0),                                   // (terminated)
		.reset_in6      (1'b0),                                   // (terminated)
		.reset_req_in6  (1'b0),                                   // (terminated)
		.reset_in7      (1'b0),                                   // (terminated)
		.reset_req_in7  (1'b0),                                   // (terminated)
		.reset_in8      (1'b0),                                   // (terminated)
		.reset_req_in8  (1'b0),                                   // (terminated)
		.reset_in9      (1'b0),                                   // (terminated)
		.reset_req_in9  (1'b0),                                   // (terminated)
		.reset_in10     (1'b0),                                   // (terminated)
		.reset_req_in10 (1'b0),                                   // (terminated)
		.reset_in11     (1'b0),                                   // (terminated)
		.reset_req_in11 (1'b0),                                   // (terminated)
		.reset_in12     (1'b0),                                   // (terminated)
		.reset_req_in12 (1'b0),                                   // (terminated)
		.reset_in13     (1'b0),                                   // (terminated)
		.reset_req_in13 (1'b0),                                   // (terminated)
		.reset_in14     (1'b0),                                   // (terminated)
		.reset_req_in14 (1'b0),                                   // (terminated)
		.reset_in15     (1'b0),                                   // (terminated)
		.reset_req_in15 (1'b0)                                    // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_002 (
		.reset_in0      (~reset_reset_n),                         // reset_in0.reset
		.reset_in1      (nios2_gen2_0_debug_reset_request_reset), // reset_in1.reset
		.clk            (sdram_pll_c0_clk),                       //       clk.clk
		.reset_out      (rst_controller_002_reset_out_reset),     // reset_out.reset
		.reset_req      (),                                       // (terminated)
		.reset_req_in0  (1'b0),                                   // (terminated)
		.reset_req_in1  (1'b0),                                   // (terminated)
		.reset_in2      (1'b0),                                   // (terminated)
		.reset_req_in2  (1'b0),                                   // (terminated)
		.reset_in3      (1'b0),                                   // (terminated)
		.reset_req_in3  (1'b0),                                   // (terminated)
		.reset_in4      (1'b0),                                   // (terminated)
		.reset_req_in4  (1'b0),                                   // (terminated)
		.reset_in5      (1'b0),                                   // (terminated)
		.reset_req_in5  (1'b0),                                   // (terminated)
		.reset_in6      (1'b0),                                   // (terminated)
		.reset_req_in6  (1'b0),                                   // (terminated)
		.reset_in7      (1'b0),                                   // (terminated)
		.reset_req_in7  (1'b0),                                   // (terminated)
		.reset_in8      (1'b0),                                   // (terminated)
		.reset_req_in8  (1'b0),                                   // (terminated)
		.reset_in9      (1'b0),                                   // (terminated)
		.reset_req_in9  (1'b0),                                   // (terminated)
		.reset_in10     (1'b0),                                   // (terminated)
		.reset_req_in10 (1'b0),                                   // (terminated)
		.reset_in11     (1'b0),                                   // (terminated)
		.reset_req_in11 (1'b0),                                   // (terminated)
		.reset_in12     (1'b0),                                   // (terminated)
		.reset_req_in12 (1'b0),                                   // (terminated)
		.reset_in13     (1'b0),                                   // (terminated)
		.reset_req_in13 (1'b0),                                   // (terminated)
		.reset_in14     (1'b0),                                   // (terminated)
		.reset_req_in14 (1'b0),                                   // (terminated)
		.reset_in15     (1'b0),                                   // (terminated)
		.reset_req_in15 (1'b0)                                    // (terminated)
	);

endmodule
